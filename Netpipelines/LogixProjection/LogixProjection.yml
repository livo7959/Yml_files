schedules:
  - cron: 0 0 * * 6 # Every Saturday at midnight UTC time
    displayName: Automated SonarQube Build
    branches:
      include:
        - master
    always: true
variables:
  - name: SonarQube_Condition
    value: contains(variables['Build.SourceBranch'], 'refs/heads/master')
  - name: build_reason_condition
    value: and(ne(variables['Build.Reason'], 'Schedule'), succeeded())
  - name: autoproject
    value: ProjectionPlaywright
  - name: dtesturl
    value: 'https://dprojection.logixhealth.com'
  - name: qtesturl
    value: 'https://qprojection.logixhealth.com'
  - name: utesturl
    value: 'https://uprojection.logixhealth.com'
  - name: ptesturl
    value: 'https://projection.logixhealth.com'
  - name: RegressionSuite
    value: 'regression.xml'
  - name: SanitySuite
    value: 'sanity.xml'
  - name: dotnet_version
    value: 8.x
  - name: checkout_path
    value: LogixProjection
  - name: dacpac_sqlproj_filepath
    value: db_scripts/LogixProjection/LogixProjectionDB/LogixProjection.sqlproj
  - name: Dacpack_ArtifactName
    value: Projection_Dacpac
stages:
  - stage: Build_APP
    displayName: Build_APP
    pool:
      name: Build
    variables:
      - name: app_directory
        value: apps/mvc/LogixProjection-app
      - name: test_app_csproj_file
        value: LogixHealth.Projection.App.Tests/LogixHealth.Projection.App.Tests.csproj
      - name: app_csproj_file
        value: LogixHealth.Projection.App.sln
      - name: project_name
        value: LogixProjectionApp
      - name: publish_path_app
        value: APP
      - name: container_path_app
        value: App/LogixHealth.Projection.App
      - name: publish_appcsproj_file
        value: LogixHealth.Projection.App/LogixHealth.Projection.App.csproj
      - name: artifactname_app
        value: LogixProjection
    jobs:
      - job: ProjectionApp
        displayName: ProjectionApp
        steps:
          - checkout: self
            path: s/LogixProjectionApp
            clean: true
          - template: ../templates/prebuild_validation.yml
            parameters:
              directoryPaths:
                - ${{ variables.app_directory }}
          - template: ../templates/dotnetframework_8_build.yml
  - stage: Build_API
    displayName: Build_API
    dependsOn: [] # Run this stage immediately (instead of being dependant upon the previous step).
    pool:
      name: Build
    variables:
      - name: api_directory
        value: platform/API/ApplicationServices/LogixProjection-api
      - name: test_csproj_file
        value: LogixHealth.Projection.Test/LogixHealth.Projection.Test.csproj
      - name: api_csproj_file
        value: LogixHealth.Projection.API.sln
      - name: project_name
        value: LogixProjectionApi
      - name: publish_path_api
        value: API
      - name: container_path_api
        value: API/LogixHealth.Projection.API
      - name: publish_apicsproj_file
        value: LogixHealth.Projection.API/LogixHealth.Projection.API.csproj
      - name: artifactname_api
        value: LogixProjectionSvc
    jobs:
      - job: ProjectionApi
        displayName: ProjectionApi
        steps:
          - checkout: self
            path: s/LogixProjectionApi
            clean: true
          - template: ../templates/prebuild_validation.yml
            parameters:
              directoryPaths:
                - ${{ variables.api_directory }}
          - template: ../templates/dotnetframework_8_build.yml
  - stage: Build_DAC_PACK
    displayName: Build-DAC-PACK
    dependsOn: [] # Run this stage immediately (instead of being dependant upon the previous step).
    pool:
      name: Build
    jobs:
      - job: Build_DAC_PACK
        displayName: Build-DAC-PACK
        steps:
          - template: ../templates/Dacpac_build_template.yml
  - stage: DACPKDeployment
    displayName: DEV-DAC-PACK
    dependsOn: Build_DAC_PACK
    pool:
      name: DBA
      demands:
        - agent.name -equals BEDDSQL001
    jobs:
      - deployment: DEV
        environment: DEV
        variables:
          - name: DBServer
            value: BEDDSQL001
          - name: TargetFolder
            value: M:\DACPACK-solutions
          - name: Dacpack_ArtifactName
            value: Projection_Dacpac
          - name: Dacpac_file
            value: LogixProjection.dacpac # give the sql filename ending with .dacpac instead of .sqlproj
          - name: xml_file
            value: LogixProjection.publish.xml # give file name for your xml file
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/Dacpac_deployment_template.yml
  - stage: DEV_APP
    displayName: DEV_APP
    dependsOn: Build_APP
    condition: ${{ variables.build_reason_condition }}
    jobs:
      - deployment: DEV
        displayName: DEV
        variables:
          - name: ArtifactName
            value: LogixProjection
          - name: SiteName
            value: LogixProjection
          - name: TargetFolder
            value: D:\TFS\LogixProjection\Release
          - name: WebAppPoolName
            value: LogixProjection
        environment:
          name: DEV
          resourceType: virtualMachine
          tags: billing
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/DownloadArtifact.yml
  - stage: DEV_API
    displayName: DEV_API
    dependsOn: Build_API
    condition: ${{ variables.build_reason_condition }}
    jobs:
      - deployment: DEV
        displayName: DEV
        variables:
          - name: ArtifactName
            value: LogixProjectionSvc
          - name: SiteName
            value: LogixProjection
          - name: TargetFolder
            value: D:\TFS\LogixProjection\Release
          - name: WebAppPoolName
            value: LogixProjection
        environment:
          name: DEV
          resourceType: virtualMachine
          tags: billing-api
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/DownloadArtifact.yml
  - stage: UAT_APP
    displayName: UAT_APP
    dependsOn: Build_APP
    condition: ${{ variables.build_reason_condition }}
    jobs:
      - deployment: UAT
        displayName: UAT
        variables:
          - name: ArtifactName
            value: LogixProjection
          - name: SiteName
            value: LogixProjection
          - name: TargetFolder
            value: D:\TFS\LogixProjection
          - name: WebAppPoolName
            value: LogixProjection
        environment:
          name: UAT
          resourceType: virtualMachine
          tags: billing
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/DownloadArtifact.yml
  - stage: UAT_API
    displayName: UAT_API
    dependsOn: Build_API
    condition: ${{ variables.build_reason_condition }}
    jobs:
      - deployment: UAT
        displayName: UAT
        variables:
          - name: ArtifactName
            value: LogixProjectionSvc
          - name: SiteName
            value: LogixProjection
          - name: TargetFolder
            value: D:\TFS\LogixProjection
          - name: WebAppPoolName
            value: LogixProjection
        environment:
          name: UAT
          resourceType: virtualMachine
          tags: billing-api
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/DownloadArtifact.yml
  - stage: PROD_APP
    displayName: PROD_APP
    dependsOn: UAT_APP
    condition: ${{ variables.build_reason_condition }}
    jobs:
      - deployment: PROD
        displayName: PROD
        variables:
          - name: ArtifactName
            value: LogixProjection
          - name: SiteName
            value: LogixProjection
          - name: TargetFolder
            value: D:\TFS\Release
          - name: WebAppPoolName
            value: LogixProjection
        environment:
          name: PROD
          resourceType: virtualMachine
          tags: billing
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/DownloadArtifact.yml
  - stage: PROD_API
    displayName: PROD_API
    dependsOn: UAT_API
    condition: ${{ variables.build_reason_condition }}
    jobs:
      - deployment: PROD
        displayName: PROD
        variables:
          - name: ArtifactName
            value: LogixProjectionSvc
          - name: SiteName
            value: LogixProjection
          - name: TargetFolder
            value: D:\TFS\Release
          - name: WebAppPoolName
            value: LogixProjection
        environment:
          name: PROD
          resourceType: virtualMachine
          tags: billing-api
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/DownloadArtifact.yml
