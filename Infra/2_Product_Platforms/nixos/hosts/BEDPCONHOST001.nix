# DO NOT EDIT THIS FILE DIRECTLY! ANY CHANGES TO THIS FILE WILL BE OVERWRITTEN.
# INSTEAD, CREATE A PULL REQUEST TO THE APPROPRIATE FILE IN THE FOLLOWING DIRECTORY:
# https://azuredevops.logixhealth.com/LogixHealth/Infrastructure/_git/infrastructure?path=/2_Product_Platforms/nixos/hosts

{ config, lib, ... }:

let
  mainIP = "10.10.33.200";
  certsWebsiteIP = "10.10.33.201";
  autoAutoCompleteIP = "10.10.33.202";
  docsWebsiteIP = "10.10.33.203";

  containerLogin = {
    registry = "https://lhinfra.azurecr.io";
    username = "16d14a88-55bd-4bf9-8812-af134f0bc5e6";
    passwordFile = config.age.secrets.sp-BEDPCONHOST001.path;
  };

  makeAzureDevOpsAgentContainer = name: {
    image = "lhinfra.azurecr.io/azure-devops-ci-cd-runner:1.0.1";
    login = containerLogin;
    hostname = name;
    environment = {
      AZP_URL = "https://azuredevops.logixhealth.com/LogixHealth";
      AZP_POOL = "BuildLinux";
      AZP_AGENT_NAME = name;
    };
    environmentFiles = [
      config.age.secrets.azure-devops-ci-cd-runner.path
    ];
  };

  pad3 = num: lib.fixedWidthString 3 "0" (toString num);

  azureDevOpsContainers = lib.listToAttrs (map
    (i: {
      name = "BEDPCI${pad3 i}";
      value = makeAzureDevOpsAgentContainer "BEDPCI${pad3 i}";
    })
    (lib.range 1 10)
  );

  additionalContainers = {
    auto-auto-complete = {
      image = "lhinfra.azurecr.io/auto-auto-complete:1.0.0";
      login = containerLogin;
      hostname = "auto-auto-complete";
      ports = [
        "${autoAutoCompleteIP}:443:8443"
      ];
      environmentFiles = [
        config.age.secrets.auto-auto-complete.path
      ];
    };

    certs-website = {
      image = "lhinfra.azurecr.io/certs-website:1.1.0";
      login = containerLogin;
      hostname = "certs-website";
      ports = [
        "${certsWebsiteIP}:80:80"
      ];
    };

    charts-data-transfer-service = {
      image = "lhinfra.azurecr.io/charts-data-transfer-service:1.0.4";
      login = containerLogin;
      hostname = "charts-data-transfer-service";
      environmentFiles = [
        config.age.secrets.charts-data-transfer-service.path
      ];
      extraOptions = [
        # The container needs to be started with this flag in order for the `mount` command to work.
        "--privileged"
      ];
    };

    docs-website = {
      image = "lhinfra.azurecr.io/docs-website:0.0.28";
      login = containerLogin;
      hostname = "docs-website";
      ports = [
        "${docsWebsiteIP}:80:80"
        "${docsWebsiteIP}:443:443"
      ];
      environmentFiles = [
        config.age.secrets.docs-website.path
      ];
    };

    fivetran-reverse-ssh = {
      image = "lhinfra.azurecr.io/fivetran-reverse-ssh:1.0.0";
      login = containerLogin;
      hostname = "fivetran-reverse-ssh";
      environmentFiles = [
        config.age.secrets.fivetran-reverse-ssh.path
      ];
    };
  };
in
{
  imports = [
    ../modules/base.nix
  ];

  age.secrets = {
    sp-BEDPCONHOST001.file = ../secrets/sp-BEDPCONHOST001.age;

    # Containers
    auto-auto-complete.file = ../secrets/auto-auto-complete.age;
    azure-devops-ci-cd-runner.file = ../secrets/azure-devops-ci-cd-runner.age;
    charts-data-transfer-service.file = ../secrets/charts-data-transfer-service.age;
    docs-website.file = ../secrets/docs-website.age;
    fivetran-reverse-ssh = ../secrets/docs-website.age;
  };

  # By default, NixOS uses DHCP, so we have to specify an IP address and gateway.
  networking = {
    hostName = "BEDPCONHOST001";
    useDHCP = false;
    interfaces = {
      ens192 = {
        ipv4.addresses = (map (i: {
          address = "10.10.33.${toString i}";
          prefixLength = 24; # Equivalent to: 255.255.255.0
        }) (lib.range 200 210));
      };
    };
    defaultGateway = "10.10.33.1";
  };

  # We only want to listen to SSH on the main IP address.
  services.openssh.listenAddresses = [
    {
      addr = mainIP;
      port = 22;
    }
  ];

  # Install Podman and run containers: https://nixos.wiki/wiki/Podman
  virtualisation = {
    containers.enable = true;
    podman = {
      enable = true;
      dockerCompat = true;
      defaultNetwork.settings.dns_enabled = true;
      autoPrune = {
        enable = true;
        flags = ["--all"];
      };
    };

    oci-containers = {
      backend = "podman";
      containers = lib.recursiveUpdate azureDevOpsContainers additionalContainers;
    };
  };
}
